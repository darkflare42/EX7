okeren
odedab

File Description:
README - This file.
Main Package        - Sjavac.java  - Main class, calls SJavaValidator.java to start the process.

Logic Package       - SJavaValidator.java - Class to attempt reading from the file given, and print the output
                                            after the compilation check is completed.
                    - SyntaxCompiler.java - Manager class for the project. Separately compile methods and then variables.
                    - Utils.java          - Utility class that holds most validity checks used by the project.
                    - RegexConfig.java    - Class to hold and handle all Regex "Magic Numbers" and properties.

Reader Package      - FileReader.java     - Wrapper class to Java's scanner. Used to read from the given file.
                    - IOException.java    - Exception class for when the reader can't properly read from the given file.

Expressions Package - Expression.java     - Interface Class that both Variable and Method implement.
                      Variable.java       - Class to represent global or function members.
                      Method.java         - Class to represent a method.
                      Operation.java      - Class to handle and check the validity of math operations.
                      Condition.java      - Class to handle and check the validity of boolean conditions.
                      VariableEnum.java   - Class to handle all the known variable types.
                      OperationEnum.java  - Class to handle all the known math operations.
                      ExpressionTypeEnum.java - Class to handle all the valid types of expressions (e.g. a method invocation)

All exceptions have self explanatory names, and inherit from CompilationException.
Logic Package Exceptions    - CompilationException.java - Main exception.
                            - ExistingMethodNameException
                            - ExistingVariableName
                            - InvalidArrayMembersDeclaration
                            - InvalidMemberDeclaration
                            - InvalidNameException
                            - UnknownCodeLineException
                            - UnknownMethodCallException
                            - UnknownVariableException

Expressions Package Exceptions
                            - AssignMismatchException
                            - ConditionArrayCallMismatch
                            - ConditionExpressionNotBooleanException
                            - ConditionUnknownExpressionException
                            - InvalidArrayIndexException
                            - MethodBadArgsCountException
                            - MethodBadArgsException
                            - MethodTypeMismatchException
                            - OperationMismatchException
                            - OperationTypeException
                            - VariableTypeException
                            - VariableUninitializedException


                    TODO overview and make changes in case any changes were made in the project.

Design:
    The way we chose to implement this exercise was to create a Scanner wrapper that will traverse a given file twice:
    - Once for all the method declarations
    - Second time for all the global declarations, outside the methods.
    We chose to do this because, considering the global scope of a given file was supposed to be a standard Class definition.
    As such, a method can be invoked in no specific order in a class definition, as long as it exists, yet members
    must be declared in order.
    The result is that we hold 2 LinkedHashMaps collection during the runtime, one for methods and one for members,
    where in each assignment we check the validity of the assignments against these 2 collections.

    Of course, during each step of the process, we checked the validity of each line using Regular Expressions.
    If at any point of the process, we would encounter any type of problem (e.g. unknown syntax, bad syntax, bad
    variable or methods calls etc..), an appropriate exception would be thrown, caught by the SJavaValidator and
    an error message will be printed.

    If the entire process would run successfully without throwing any exception, we would treat a file as valid.
            TODO overview


Answers to Questions:
- Handling errors:
   To handle the different types of errors, we created a parent CompilationException class that all compilation related
   exceptions need to inherit from. We did this in order to differentiate between an IOException (i.e. reading the given
   file) and compilation exceptions, the ones we expected to catch as a part of the exercise.
   In order to answer the requirement to post an error message regarding the error in question, should we encounter one,
   every CompilationException sub class calls the super constructor with a String, explaining the error caught.
   If and when a CompilationException is caught, the specific message will be accessed by the SJavaValidator and printed.

- How would we modify the code for new variable types:
   In order to add a new type of variables we would need to take care of 2 things:
   1. Add an Enum of their type, and name of their type, to VariableEnum class.
   2. Add the way they are represented as a String to ExpressionTypeEnum class. (e.g. float type has digits,
      a period and then some more digits).
   TODO DID I MISS ANYTHING?

- How would we implement if-else block: TODO NEED TO PICK EITHER THIS QUESTION OR THE NEXT
    TODO I THINK IS IS FAR SIMPLER TO ANSWER, BUT NOT 100% ON HOW YOU IMPLEMENTED IT.
    TODO STRUCTURE SHOULD BE SIMILAR TO THE WAY THE EXISTING CODE LOOKS FOR THE END OF A METHOD AFTER FINDING A METHOD.
- How would we implement cross classes compilation: TODO NEED TO PICK EITHER THIS QUESTION ON THE PREVIOUS ONE

- Two most used regular expressions:
    1. Expression for finding a member declaration:
    "(int|double|String|boolean|char) (_?[a-zA-Z]+[\w]*)( ?\\s*?=?\\s*?\"?-?\\w?.*\"?)?;$";
    2. Expression for finding a method declaration:
    "(int|double|String|boolean|char|void)(\\[\\])? [a-zA-Z][_\\w]* ?\\(.*\\) ?\\{"

    Note: both of these expressions are located in RegexConfig class, and some of their parts are generated
    dynamically in case new types will be added.
